<?php

// @todo Alter the username autocomplete
// @todo Allow users to login with their real name
// @todo Disable the username field
// @todo Allow users to override their real name

/**
 * Implements hook_permission().
 */
function realname_permission() {
  $permissions['administer realname'] = array(
    'title' => t('Administer Real Name configuration.'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function realname_menu() {
  $items['admin/config/people/realname'] = array(
    'title' => 'Real name',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('realname_settings_form'),
    'access arguments' => array('administer realname'),
    'file' => 'realname.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_username_alter().
 */
function realname_username_alter(&$name, stdClass $account) {
  static $in_username_alter = FALSE;

  if (isset($account->realname)) {
    $name = $account->realname;
  }
  elseif (!$in_username_alter) {
    // Because realname tokens may execute format_username() we need to prevent
    // recursion from happening.
    $in_username_alter = TRUE;
    if ($realname = realname_load($account)) {
      $name = $realname;
    }
    $in_username_alter = FALSE;
  }
}

/**
 * Implements hook_user_load().
 */
function realname_user_load(array $accounts) {
  $realnames = realname_load_multiple($accounts);
  foreach ($realnames as $uid => $realname) {
    $accounts[$uid]->realname = $realname;
  }
}

/**
 * Implements hook_user_update().
 */
function realname_user_update(array &$edit, stdClass $account, $category) {
  // Since user data may have changed, delete the existing realname.
  realname_delete($account->uid);
}

/**
 * Implements hook_user_delete().
 */
function realname_user_delete(stdClass $account) {
  realname_delete($account->uid);
}

/**
 * Loads a real name.
 *
 * @param $uid
 *   A user account object.
 * @return
 *   The user's generated real name.
 */
function realname_load(stdClass $account) {
  $realnames = realname_load_multiple(array($account->uid => $account));
  return reset($realnames);
}

/**
 * Loads multiple real names.
 *
 * @param $accounts
 *   An array of user account objects keyed by user ID.
 * @return
 *   An array of real names keyed by user ID.
 */
function realname_load_multiple(array $accounts) {
  $realnames = &drupal_static(__FUNCTION__, array());

  if ($new_accounts = array_diff_key($accounts, $realnames)) {
    // Attempt to fetch realnames from the database first.
    $realnames += db_query("SELECT uid, realname FROM {realname} WHERE uid IN (:uids)", array(':uids' => array_keys($new_accounts)))->fetchAllKeyed();

    // For each account that was not present in the database, generate its
    // real name.
    foreach ($new_accounts as $uid => $account) {
      if (!isset($realnames[$uid]) || !drupal_strlen($realnames[$uid])) {
        // Get the default pattern and allow other modules to alter it.
        $pattern = variable_get('realname_pattern', '[user:name-raw]');
        drupal_alter('realname_pattern', $pattern, $account);

        // Perform token replacement on the real name pattern.
        $realname = token_replace($pattern, array('user' => $account), array('clear' => TRUE));
        $realname = trim($realname);
        module_invoke_all('realname_load', $realname, $account);

        // Save to the database and the static cache.
        db_merge('realname')
          ->key(array('uid' => $uid))
          ->fields(array(
            'realname' => $realname,
            'created' => REQUEST_TIME,
          ))
          ->execute();
        $realnames[$uid] = $realname;
      }
    }

  }

  return array_intersect_key($realnames, $accounts);
}

/**
 * Delete a real name.
 *
 * @param $uid
 *   A user ID.
 */
function realname_delete($uid) {
  return realname_delete_multiple(array($uid));
}

/**
 * Delete multiple real names.
 *
 * @param $uids
 *   An array of user IDs.
 */
function realname_delete_multiple(array $uids) {
  db_delete('realname')->condition('uid', $uids, 'IN')->execute();
  drupal_static_reset('realname_load_multiple');
}

/**
 * Delete all real names.
 */
function realname_delete_all() {
  db_delete('realname')->execute();
  drupal_static_reset('realname_load_multiple');
}
