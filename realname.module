<?php
// $Id$

/**
 * @file
 * The RealName module allows the admin to choose fields from the user profile
 * that will be used to add a "realname" element (method) to a user object.
 * Hook_user is used to automatically add this to any user object that is loaded.
 *
 * @copyright Copyright (c) 2007-2008 Nancy Wichmann.  All rights reserved.
 */

  if (module_exists('token')) {
    include_once(drupal_get_path('module', 'realname') .'/token_realname.inc');
  }

//********************************************************************
//* Drupal Hooks
//********************************************************************/

/**
 * Implementation of hook_help().
 */
function realname_help($path, $args = NULL) {
  switch ($path) {
    case 'admin/user/realname':
      return t('This page displays the status of and settings for the RealName module.');

    case 'admin/help#realname':
      return t('This simple module adds a "realname" element (method) to a user object when that object is loaded.');
  }
}

/**
 * Implementation of hook_perm().
 */
function realname_perm() {
  return array('use realname');
}

/**
 * Implementation of hook_menu().
 */
function realname_menu() {
  global $user;
  $items = array();

  $items['admin/user/realname'] = array(
    'title' => 'RealName',
    'description' => "Configure which fields are used to create a user's RealName.",
    'access arguments' => array('administer users'),
    'page callback' => 'realname_admin_settings',
    'type' => MENU_NORMAL_ITEM,
    );

  $items['admin/user/realname/fields'] = array(
    'title' => 'Fields',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('realname_admin_fields'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    );

  $items['admin/user/realname/module'] = array(
    'title' => 'Module',
    'access arguments' => array('administer users'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('realname_admin_module'),
    'type' => MENU_LOCAL_TASK,
    );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function realname_init() {
  // If desired, load the theme override file.
  if (variable_get('realname_theme', FALSE)) {
    include_once(drupal_get_path('module', 'realname') .'/realname_theme.inc');
  }
}

/**
 * Implementation of hook_user().
 */
function realname_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'load') {
    $account->realname = realname_make_name($account);
  }

  // If theme then replace name with realname.
  if (variable_get('realname_theme', FALSE) && $account->realname) {
    //Store it for places where it needed
    if (!isset($account->realname_save) && is_object($account)) {
      $account->realname_save = $account->name;
      $account->name = $account->realname;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function realname_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  static $type;
  static $accounts = array();
  if (!user_access('use realname')) {
    return;
  }

  if (!variable_get('realname_nodeapi', FALSE)) {
    return;
  }
  switch ($op) {
    case 'load':
      // Don't operate on the node type that we are using.
      if (!isset($type)) {
        $type = variable_get('realname_profile_type', NULL);
      }
      if ($node->type == $type) {
        break;
      }
      // Node is being loaded.
      // Save the username that is already there.
      $node->realname_save = $node->name;
      if (!isset($accounts[$node->uid])) {
        $accounts[$node->uid] = user_load(array('uid' => $node->uid));
      }
      $account = $accounts[$node->uid];
      $node->realname = $node->name = realname_make_name($account);
      $node->homepage = $account->homepage;
      break;

    case 'prepare':
      // Node is about to be edited.
      // Reset the username or save will fail.
      if (isset($node->realname_save)) {
        $node->name = $node->realname_save;
      }
      break;
  }
}

/**
 * Implementation of hook_comment().
 */
function realname_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
      if (!$comment->homepage) {
        $account = user_load(array('uid' => $comment->uid));
        realname_make_name($account);
        $comment->homepage = $account->homepage;
      }
      break;
  }
  return;
}

/**
 * Implementation of hook_form_alter().
 * Intercepts the contact forms to show the realname.
 */
function realname_form_alter(&$form, $form_state, $form_id) {
  if (!user_access('use realname')) {
    return;
  }

  global $user;
  switch ($form_id) {
    case 'comment_form':
      if(!isset($user->realname)) {
        $user = user_load(array('uid'=>$user->uid));
      }
      $form['author']['#value'] = $user->realname_save;
      break;

   case 'user_profile_form':
      if (variable_get('realname_theme', FALSE)) {
        $form['account']['name']['#default_value'] = $form['_account']['#value']->realname_save;
      }
      break;

    case 'contact_mail_user':
      if (!isset($user->realname)) {
        $user = user_load(array('uid' => $user->uid));
      }
      $form['from']['#value'] = check_plain($user->realname) .' &lt;'. check_plain($user->mail) .'&gt;';
      break;
    
    case 'contact_mail_page':
      if (!isset($user->realname)) {
        $user = user_load(array('uid' => $user->uid));
      }
      $form['name']['#default_value'] = $user->uid ? $user->realname : '';
      break;
  }
}

//********************************************************************
//* Module Functions
//********************************************************************

/**
 * Using selected fields, build the "real name" field in the object.
 *
 * @param
 *   $account - the user object to update.
 *
 * @return
 *   The constructed "real name" string.
 */
function realname_make_name(&$account) {
  static $fields, $pattern_saved, $homepage, $type, $module;
  static $users = array();
  static $links = array();

  if (isset($users[$account->uid])) {
    $account->homepage = $links[$account->uid];
    return $users[$account->uid];
  }

  // Get our controlling variables (static makes it once per page load).
  if (!isset($fields)) {
    $fields = variable_get('realname_fields', array());
    $pattern_saved = variable_get('realname_pattern', ' ');
    $homepage = variable_get('realname_homepage', NULL);
    $theme = variable_get('realname_theme', FALSE);
    $module = variable_get('realname_profile_module', 'profile');
    $type = variable_get('realname_profile_type', NULL);
    if ($module) {
      include_once(drupal_get_path('module', 'realname') .'/realname_'. $module .'.inc');
    }
  }
  $pattern = $pattern_saved;

  // Has the profile been loaded?
  if (!isset($account->{key($fields)})) {
    $load_func = $module .'_load_profile';
    if (!function_exists($load_func)) {
      drupal_set_message(t('The profile load function (!module) was not found.', array('!module' => $load_func)), 'error');
    }
    module_invoke($module, 'load_profile', $account, $type);
  }

  $stuff = array();
  $i = 0;
  foreach ($fields as $name => $weight) {
    ++$i;
    if (isset($account->$name)) {
      if (is_array($account->$name)) {
        $stuff['%'. $i] = $account->{$name}[0]['view'];
      }
      else {
        $stuff['%'. $i] = check_plain($account->$name);
      }
    }
    else {
      // If there is no value, remove the patterm piece, except the first.
      $pattern = $i > 1 ? str_replace('%'. $i, NULL, $pattern) : $pattern;
    }
  }

  // If no fields set, use username.
  if (count($stuff) == 0) {
    $stuff['%1'] = $account->name;
  }

  if ($homepage && $account->$homepage) {
    if ($theme) {
      $links[$account->uid] = theme('username', $account);
    }
    else {
      $links[$account->uid] = $account->$homepage;
    }
  }

  $users[$account->uid] = $string = trim(strtr($pattern, $stuff));
  return $string;
}

/**
 * Provides array sorting function for uasort.
 *  @link http://us2.php.net/manual/en/function.uasort.php PHP Manual @end-link
 *
 * @param
 *   $a - the first array to be compared.
 *
 * @param
 *   $b - the second array to be compared.
 *
 * @return
 *   integer indicating ordering.
 */
function _realname_sort($a, $b) {
  // Sort first by weight.
  $ret = $a['weight'] - $b['weight'];
  if ($ret == 0) {
    // The two are equal, so use the title.
    $ret = strcmp($a['title'], $b['title']);
  }

  return $ret;
}

/**
 * Displays the admin settings form.
 */
function realname_admin_settings() {
  return drupal_get_form('realname_admin_fields');
}

function realname_admin_module($form_state) {
  $form = array();
  // Get the list of modules we support.
  include_once(drupal_get_path('module', 'realname') .'/realname_supported.inc');
  $supported_modules = realname_supported_modules();

  $choices = $show_types = array();
  foreach ($supported_modules as $module => $values) {
    if (module_exists($module)) {
      $choices[$module] = check_plain($values['name']);
      $show_types[$module] = $values['types'];
    }
  }

  $form['show_types'] = array('#type' => 'value', '#value' => $show_types);

  if (isset($form_state['storage']['module_chosen'])) {
    $module = $form_state['storage']['module_chosen'];
    $form['module'] = array(
      '#type' => 'item',
      '#value' => t('You have chosen the "@module" module to provide data.', array('@module' => $module)),
      );
    // Now show the types, if appropriate.
    $form['type'] = array(
      '#type' => 'radios',
      '#title' => t('Content types available to @module', array('@module' => $module)),
      '#options' => $form_state['storage']['types'],
      '#default_value' => variable_get('realname_profile_type', NULL),
      '#required' => TRUE,
      );
  }
  else {
    $form['module'] = array(
      '#type' => 'radios',
      '#title' => t('These modules are available for providing data to RealName'),
      '#options' => $choices,
      '#default_value' => variable_get('realname_profile_module', NULL),
      '#required' => TRUE,
      );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Use this module'),
    );
  return $form;
}

function realname_admin_module_submit($form, &$form_state) {
  if (!isset($form_state['storage']['module_chosen'])) {
    $module = $form_state['values']['module'];
    variable_set('realname_profile_module', $module);
    $form_state['storage']['module_chosen'] = $module;

    $show_types = $form_state['values']['show_types'];
    if ($show_types[$module]) {
      include_once(drupal_get_path('module', 'realname') .'/realname_'. $module .'.inc');
      // This module uses types, so let's see what types are allowed.
      $types = call_user_func('realname_'. $module .'_get_types');
      if (count($types) > 1) {
        $form_state['storage']['types'] = $types;
        return;
      }
      else {
        variable_set('realname_profile_type', key($types));
      }
    }
    // This module doesn't use types, or only does one type, so go pick fields.
    unset($form_state['storage']);
    $form_state['redirect'] = 'admin/user/realname/fields'; // Go get the fields now.
    return;
  }
}

function realname_admin_fields() {
  $form = array();
  $current = variable_get('realname_fields', array());
  $module = variable_get('realname_profile_module', NULL);
  $type = variable_get('realname_profile_type', NULL);
  // Do we have a module set yet?
  if (!$module) {
    drupal_goto('admin/user/realname/module');
  }

  $what = t('You are using the %module module to provide fields.', array('%module' => $module));
  if ($type) {
    $what .= t('The %type type is the source of data.', array('%type' => $type));
  }

  $form['heading'] = array(
    '#type' => 'item',
    '#value' => $what,
    );

  include_once(drupal_get_path('module', 'realname') .'/realname_'. $module .'.inc');
  $profile_fields = call_user_func('realname_'. $module .'_get_fields', $current);
  $fields = $profile_fields['fields'];
  $links = $profile_fields['links'];
  uasort($fields, '_realname_sort');

  $form['start_table'] = array(
    '#type' => 'markup',
    '#value' => '<table><tr><th>Select</th><th>Field name</th><th>Weight</th></tr>',
    );

  $i = 0;
  foreach ($fields as $f_name => $values) {
    $form['field_select_'. $i] = array(
      '#type' => 'checkbox',
      '#default_value' => $values['selected'],
      '#prefix' => '<tr><td align="center">',
      '#suffix' => '</td>',
      );

    $form['field_name_'. $i] = array(
      '#type' => 'hidden',
      '#value' => $f_name,
      );

    $form['field_title_'. $i] = array(
      '#type' => 'item',
      '#value' => $values['title'],
      '#prefix' => '<td>',
      '#suffix' => '</td>',
      );

    $form['field_weight_'. $i] = array(
      '#type' => 'weight',
      '#delta' => 10,
      '#default_value' => $values['weight'],
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>',
      );

    ++$i;
  }

  $form['end_table'] = array(
    '#type' => 'markup',
    '#value' => '</table>',
    );

  $form['realname_pattern'] = array(
    '#type' => 'textfield',
    '#field_prefix' => '<strong>'. t('Name Pattern') .'</strong> ',
    '#description' => t('The determines how the fields will be used to create the "Real name." Use "%1" to refer to the first field, "%2" to refer to the second, etc..'),
    '#size' => 30,
    '#default_value' => variable_get('realname_pattern', '%1'),
    );

  $form['realname_theme'] = array(
    '#type' => 'checkbox',
    '#title' => '<strong>'. t('Override username theme') .'</strong>',
    '#description' => t('If this option is selected, the standard username theme function will be overriden to use the "Real name."'),
    '#default_value' => variable_get('realname_theme', FALSE),
    );

  $form['realname_nodeapi'] = array(
    '#type' => 'checkbox',
    '#title' => '<strong>'. t('Show realname in nodes') .'</strong>',
    '#description' => t('If this option is selected, the "Real name" will be used on node displays.'),
    '#default_value' => variable_get('realname_nodeapi', FALSE),
    );

  $form['realname_notver'] = array(
    '#type' => 'checkbox',
    '#title' => '<strong>'. t('Show "Not verified" for anonymous users') .'</strong>',
    '#description' => t('Drupal core adds "Not verified" for anonymous users, this option allows that to be turned off.'),
    '#default_value' => variable_get('realname_notver', TRUE),
    );

  // If there were any URL fields, give a home page option.
  if ($links) {
    $links[''] = t('');
    asort($links);
    $form['realname_homepage'] = array(
      '#type' => 'select',
      '#options' => $links,
      '#title' => t('Link to homepage'),
      '#description' => t('There were URL fields in the profile. If one of these is a personal homepage link, you may choose to link to it rather than the user profile. Choose which field to use.'),
      '#default_value' => variable_get('realname_homepage', NULL),
      );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );

  return $form;
}

/**
 * Form submit handler.
 */
function realname_admin_fields_submit($form, &$form_state) {
  $i = 0;
  $fields = array();
  // Run the form values to get all the fields they want.
  while (isset($form_state['values']['field_select_'. $i])) {
    if ($form_state['values']['field_select_'. $i]) {
      $fields[] = array('title' => $form_state['values']['field_name_'. $i], 'weight' => $form_state['values']['field_weight_'. $i]);
    }
    ++$i;
  }
  // A little hoop jumping to sort right.
  uasort($fields, '_realname_sort');
  $realname_fields = array();
  foreach ($fields as $key => $values) {
    $realname_fields[$values['title']] = $values['weight'];
  }

  // Okay, save the stuff.
  variable_set('realname_fields', $realname_fields);
  variable_set('realname_pattern', $form_state['values']['realname_pattern']);
  variable_set('realname_theme', $form_state['values']['realname_theme']);
  variable_set('realname_nodeapi', $form_state['values']['realname_nodeapi']);
  variable_set('realname_notver', $form_state['values']['realname_notver']);
  variable_set('realname_homepage', $form_state['values']['realname_homepage']);

  drupal_set_message(t('Configuration has been updated.'), 'status');
}
